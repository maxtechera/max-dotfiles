## Solo Execution Context (ABSOLUTE RULES)

When_Invoked_By_Solo:
  mandatory_rules: ".claude/shared/solo-execution-rules.yml"
  identity: "Automated agent working in COMPLETE ISOLATION"
  workspace_requirement: "ALWAYS use /tmp/[repo]-[ticket-id] git worktrees"
  forbidden: "NEVER work in user's active repository directories"
  pr_strategy: "EXACTLY ONE PR per ticket - no exceptions"
  
  critical_checks:
    before_any_work: |
      if [[ ! $(pwd) =~ ^/tmp/ ]]; then
        echo "FATAL: Not in isolated environment"
        exit 1
      fi
    
    repository_isolation: |
      # MUST create worktree for ALL repository work
      git worktree add /tmp/[repo-name]-[ticket-id] -b feature/[ticket-id]
      cd /tmp/[repo-name]-[ticket-id]
      # ALL work happens here
    
    cleanup_mandatory: |
      # ALWAYS clean up, even on failure
      git worktree remove /tmp/[repo-name]-[ticket-id] || true

  reference: "See .claude/shared/solo-execution-rules.yml for complete requirements"

## MCP Decision Matrix

Flag_Control:
  --c7: "Force Context7 for documentation lookup"
  --seq: "Force Sequential for complex analysis" 
  --magic: "Force Magic for UI generation"
  --pup: "Force Puppeteer for browser automation"
  --all-mcp: "Enable all MCP servers"
  --no-mcp: "Disable all MCP usage"

Solopreneur_Triggers:
  "docs for X": "C7(resolve-library-id: X) → get-docs"
  "how to integrate Y": "C7(resolve-library-id: Y) → get-docs(topic: integration)"
  "need component/form/UI": "Magic(builder) → integrate"
  "debug performance/errors": "Sequential(analysis) → implement fix"
  "design system/architecture": "Sequential(system design) → C7(patterns)"
  "manage personal projects": "Linear(smart cache) → efficient workflows"
  "check client work/tickets": "Jira(optimized queries) → professional delivery"
  "document knowledge/patterns": "Notion(create pages) → knowledge compound"
  "plan content/tutorials": "Notion(content calendar) → authority building"

Context_Triggers:
  Import_errors: "C7(resolve-library-id) → verify docs BEFORE implementation"
  Complex_debugging: "Sequential(root cause analysis) → native implementation"
  UI_requests: "Magic(builder/refiner) → Puppeteer(validation)"
  Performance_issues: "Sequential(bottleneck analysis) → optimization"
  Personal_projects: "Linear(smart cache) → project switching"
  Client_work: "Jira(cached queries) → professional context switching"

Research_First_Rule:
  External_library: "C7 lookup REQUIRED - NEVER implement without checking docs"
  New_patterns: "Sequential thinking + research REQUIRED before coding"
  Unknown_APIs: "WebSearch + C7 documentation REQUIRED"
  Confidence_under_90: "Implementation BLOCKED until research complete"

## Server Capabilities for Solopreneurs

Context7_for_Documentation:
  Primary_use: "Library documentation lookup before implementation"
  Workflow: "resolve-library-id → get-docs → understand → implement"
  Solopreneur_value: "Avoid reinventing wheels, learn best practices"
  Quality_gate: "✓Relevant docs found → Proceed | ✗No match → Research alternatives"

Sequential_for_Analysis:
  Primary_use: "Complex debugging, architecture decisions, system design"
  Workflow: "Problem decomposition → analysis → solution planning → implementation"
  Solopreneur_value: "Think through complex problems systematically"
  Quality_gate: "✓Clear analysis → Implement | ✗Unclear → Ask targeted questions"

Magic_for_UI:
  Primary_use: "Rapid UI component generation and prototyping"
  Workflow: "Requirements → Magic builder → refine → integrate → test"
  Solopreneur_value: "Ship UI fast, iterate based on feedback"
  Quality_gate: "✓Good component → Integrate | ✗Poor → Try different approach"

Linear_for_Projects:
  Primary_use: "Personal project management with smart caching"
  Workflow: "Smart cache → instant project data → workflow optimization"
  Solopreneur_value: "95% faster project data access, seamless switching"
  Auto_features: "Cache management, change detection, incremental sync"
  
Linear_Cache_Layer:
  Location: "Check file system cache before API calls"
  Priority: "ALWAYS check local cache first"
  Cache_Strategy:
    - "Look for .linear-cache/ directory in project root"
    - "Check ~/.claude/linear-cache/ for global cache"
    - "Parse cached JSON files for ticket data"
    - "Only call Linear MCP if cache miss or stale data"
  Performance: "Instant access to cached tickets, 0 API calls for cache hits"
  Auto_Features:
    - "Automatic cache invalidation on ticket updates"
    - "Incremental sync for changed data only"
    - "Offline access to previously cached tickets"

Jira_for_Client_Work:
  Primary_use: "Professional client work management with optimized queries"
  Workflow: "Cached cloud IDs → minimal field queries → efficient updates"
  Solopreneur_value: "Professional delivery tracking, billable time optimization"
  Optimization: "Single JQL queries, minimal fields, cloud ID caching (see jira-optimization.yml)"
  Integration: "Time tracking, sprint management, client communication"
  Performance: "70% reduction in API calls, <2 second response time"

GitHub_for_Code:
  Primary_use: "Code management, pattern search, repository operations"
  Workflow: "Search patterns → find solutions → adapt to current project"
  Solopreneur_value: "Learn from existing code, avoid duplicating effort"
  Pattern_search: "search_code for cross-repo pattern discovery"

Sanity_for_Content:
  Primary_use: "Content management and creation workflows"
  Workflow: "Content operations → knowledge management → publication"
  Solopreneur_value: "Streamline content creation from development work"

Notion_for_Knowledge:
  Primary_use: "Knowledge base, documentation, content planning, pattern library"
  Workflow: "Capture insights → organize knowledge → plan content → track patterns"
  Solopreneur_value: "Central knowledge hub for all learning and content creation"
  Key_features: "Database views, linked relationships, visual planning"
  Integration: "Weekly pattern extraction, decision logging, content calendar"

## Token Economics

Budget_Strategy:
  Native_first: "0 tokens - Use for simple file operations, git commands"
  Light_MCP: "100-500 tokens - Single C7 lookup, simple Linear queries"
  Medium_MCP: "500-2K tokens - Sequential analysis, Magic generation"
  Heavy_MCP: "2K-10K tokens - Multi-MCP workflows, complex operations"

Escalation_Logic:
  1: "Native tools for simple, well-understood tasks"
  2: "C7 for any external library questions"
  3: "Sequential for multi-step problems requiring analysis"
  4: "Magic for UI generation when appropriate"
  5: "Multi-MCP for complex workflows requiring multiple capabilities"

Abort_Conditions:
  ">50% context used": "Switch to native tools"
  "MCP timeout/error": "Graceful fallback to native implementation"
  "Diminishing returns": "Stop MCP calls, proceed with current knowledge"

## Quality Control

Server_Validation:
  C7: "✓Relevant docs → Proceed | ⚠Partial → Try different terms | ✗No match → Sequential alternatives"
  Sequential: "✓Clear analysis → Implement | ⚠Partial → Continue thoughts | ✗Unclear → Native + questions"
  Magic: "✓Component matches needs → Integrate | ⚠Close → Refiner | ✗Poor → Different approach"
  Linear: "✓Data current → Use cache | ⚠Stale → Incremental sync | ✗Error → Force refresh"

Multi_MCP_Coordination:
  Synergy: "Results should enhance each other"
  Conflict_resolution: "Most authoritative source wins"
  Redundancy_check: "Stop calls when sufficient information gathered"

## Solopreneur Workflow Integration

Project_Context_Switching:
  Personal_projects: "Linear cache current state → switch context"
  Client_work: "Jira cache current tickets → professional handoff"
  During_switch: "C7 lookup for new project patterns if needed"
  After_switch: "Sequential analysis if complex context differences"

Knowledge_Building:
  Pattern_discovery: "GitHub search_code for similar solutions"
  Documentation: "C7 for understanding best practices → Notion for personal notes"
  Architecture: "Sequential for system design thinking → Notion for decision logging"
  Implementation: "Magic for rapid prototyping → Notion for pattern extraction"
  Knowledge_compound: "All learnings flow to Notion for long-term retrieval"

Multi_Stream_Optimization:
  Client_work: "Jira for ticket management, C7 for professional patterns, Sequential for complex problems"
  Personal_projects: "Linear for project management, Magic for rapid iteration, Notion for documentation"
  Content_creation: "Notion for planning, Sequential for teaching structure, Sanity for publishing"
  Knowledge_management: "Notion for pattern library, decision log, learning capture"

## Best Practices

DO:
  - Use C7 for ALL external library documentation lookup
  - Apply Sequential thinking to complex multi-step problems
  - Leverage Linear smart cache for project management efficiency
  - Use Magic for rapid UI prototyping and iteration
  - Cache and reuse MCP results within sessions
  - Validate MCP outputs before implementation
  - Document successful MCP patterns for reuse

DON'T:
  - Use MCPs for simple tasks native tools handle well
  - Chain MCP calls without validating intermediate results
  - Exceed 50% context with MCP usage
  - Retry failed MCP calls without changing approach
  - Use MCPs when immediate action is needed

OPTIMIZE:
  - Batch similar MCP calls when possible
  - Reuse session results to avoid duplicate calls
  - Start with least expensive MCP options
  - Prefer native file operations for known patterns
  - Document successful MCP workflows for future reference

## Research-First Enforcement

Critical_Rule: "NEVER implement external library integrations without C7 documentation lookup"

Implementation_Blocks:
  - Import statements for unknown libraries → C7 required
  - API integrations → WebSearch + C7 required
  - Framework usage → C7 patterns required
  - Complex debugging → Sequential analysis required

Confidence_Thresholds:
  - >90% confidence → Proceed with implementation
  - 70-90% confidence → Quick C7 lookup for validation
  - <70% confidence → Full research cycle required

This ensures solopreneurs build on solid foundations rather than guessing or reinventing solutions.